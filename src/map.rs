/*
   Autogenerated Data, Do not Edit! 
   Author: @felixfaisal 
*/
#![allow(non_camel_case_types)]
use vpp_macros::Message; 
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum::{U10, U24, U256, U32, U64};
use crate::ip_types::*; 
use crate::interface_types::*; 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_add_domain_7a5a18c9)] 
pub struct MapAddDomain { 
	pub client_index : u32, 
	pub context : u32, 
	pub ip6_prefix : Ip6Prefix, 
	pub ip4_prefix : Ip4Prefix, 
	pub ip6_src : Ip6Prefix, 
	pub ea_bits_len : u8, 
	pub psid_offset : u8, 
	pub psid_length : u8, 
	pub mtu : u16, 
	pub tag : FixedSizeString<U64>, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_add_domain_reply_3e6d4e2c)] 
pub struct MapAddDomainReply { 
	pub context : u32, 
	pub index : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_del_domain_8ac76db6)] 
pub struct MapDelDomain { 
	pub client_index : u32, 
	pub context : u32, 
	pub index : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_del_domain_reply_e8d4e804)] 
pub struct MapDelDomainReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_add_del_rule_c65b32f7)] 
pub struct MapAddDelRule { 
	pub client_index : u32, 
	pub context : u32, 
	pub index : u32, 
	pub is_add : bool, 
	pub ip6_dst : Ip6Address, 
	pub psid : u16, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_add_del_rule_reply_e8d4e804)] 
pub struct MapAddDelRuleReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_domains_get_f75ba505)] 
pub struct MapDomainsGet { 
	pub client_index : u32, 
	pub context : u32, 
	pub cursor : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_domains_get_reply_53b48f5d)] 
pub struct MapDomainsGetReply { 
	pub context : u32, 
	pub retval : i32, 
	pub cursor : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_domain_dump_51077d14)] 
pub struct MapDomainDump { 
	pub client_index : u32, 
	pub context : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_domain_details_fc1859dd)] 
pub struct MapDomainDetails { 
	pub context : u32, 
	pub domain_index : u32, 
	pub ip6_prefix : Ip6Prefix, 
	pub ip4_prefix : Ip4Prefix, 
	pub ip6_src : Ip6Prefix, 
	pub ea_bits_len : u8, 
	pub psid_offset : u8, 
	pub psid_length : u8, 
	pub flags : u8, 
	pub mtu : u16, 
	pub tag : FixedSizeString<U64>, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_rule_dump_e43e6ff6)] 
pub struct MapRuleDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub domain_index : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_rule_details_c7cbeea5)] 
pub struct MapRuleDetails { 
	pub context : u32, 
	pub ip6_dst : Ip6Address, 
	pub psid : u16, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_if_enable_disable_59bb32f4)] 
pub struct MapIfEnableDisable { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub is_enable : bool, 
	pub is_translation : bool, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_if_enable_disable_reply_e8d4e804)] 
pub struct MapIfEnableDisableReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_summary_stats_51077d14)] 
pub struct MapSummaryStats { 
	pub client_index : u32, 
	pub context : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_summary_stats_reply_0e4ace0e)] 
pub struct MapSummaryStatsReply { 
	pub context : u32, 
	pub retval : i32, 
	pub total_bindings : u64, 
	pub total_pkts : u64, 
	pub total_bytes : u64, 
	pub total_ip4_fragments : u64, 
	pub total_security_check : u64, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_fragmentation_9ff54d90)] 
pub struct MapParamSetFragmentation { 
	pub client_index : u32, 
	pub context : u32, 
	pub inner : bool, 
	pub ignore_df : bool, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_fragmentation_reply_e8d4e804)] 
pub struct MapParamSetFragmentationReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_icmp_58210cbf)] 
pub struct MapParamSetIcmp { 
	pub client_index : u32, 
	pub context : u32, 
	pub ip4_err_relay_src : Ip4Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_icmp_reply_e8d4e804)] 
pub struct MapParamSetIcmpReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_icmp6_5d01f8c1)] 
pub struct MapParamSetIcmp6 { 
	pub client_index : u32, 
	pub context : u32, 
	pub enable_unreachable : bool, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_icmp6_reply_e8d4e804)] 
pub struct MapParamSetIcmp6Reply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_add_del_pre_resolve_17008c66)] 
pub struct MapParamAddDelPreResolve { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub ip4_nh_address : Ip4Address, 
	pub ip6_nh_address : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_add_del_pre_resolve_reply_e8d4e804)] 
pub struct MapParamAddDelPreResolveReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_security_check_6abe9836)] 
pub struct MapParamSetSecurityCheck { 
	pub client_index : u32, 
	pub context : u32, 
	pub enable : bool, 
	pub fragments : bool, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_security_check_reply_e8d4e804)] 
pub struct MapParamSetSecurityCheckReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_traffic_class_9cac455c)] 
pub struct MapParamSetTrafficClass { 
	pub client_index : u32, 
	pub context : u32, 
	pub copy : bool, 
	pub tc_class : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_traffic_class_reply_e8d4e804)] 
pub struct MapParamSetTrafficClassReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_tcp_87a825d9)] 
pub struct MapParamSetTcp { 
	pub client_index : u32, 
	pub context : u32, 
	pub tcp_mss : u16, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_set_tcp_reply_e8d4e804)] 
pub struct MapParamSetTcpReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_get_51077d14)] 
pub struct MapParamGet { 
	pub client_index : u32, 
	pub context : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(map_param_get_reply_28092156)] 
pub struct MapParamGetReply { 
	pub context : u32, 
	pub retval : i32, 
	pub frag_inner : u8, 
	pub frag_ignore_df : u8, 
	pub icmp_ip4_err_relay_src : Ip4Address, 
	pub icmp6_enable_unreachable : bool, 
	pub ip4_nh_address : Ip4Address, 
	pub ip6_nh_address : Ip6Address, 
	pub ip4_lifetime_ms : u16, 
	pub ip4_pool_size : u16, 
	pub ip4_buffers : u32, 
	pub ip4_ht_ratio : f64, 
	pub sec_check_enable : bool, 
	pub sec_check_fragments : bool, 
	pub tc_copy : bool, 
	pub tc_class : u8, 
} 
