/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : Ip4Address, 
	 ip6 : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum AddressFamily { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpFeatureLocation { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpEcn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpDscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpProto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LbSrvType { 
	 LB_API_SRV_TYPE_CLUSTERIP=0, 
	 LB_API_SRV_TYPE_NODEPORT=1, 
	 LB_API_SRV_N_TYPES=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LbEncapType { 
	 LB_API_ENCAP_TYPE_GRE4=0, 
	 LB_API_ENCAP_TYPE_GRE6=1, 
	 LB_API_ENCAP_TYPE_L3DSR=2, 
	 LB_API_ENCAP_TYPE_NAT4=3, 
	 LB_API_ENCAP_TYPE_NAT6=4, 
	 LB_API_ENCAP_N_TYPES=5, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LbLkpTypeT { 
	 LB_API_LKP_SAME_IP_PORT=0, 
	 LB_API_LKP_DIFF_IP_PORT=1, 
	 LB_API_LKP_ALL_PORT_IP=2, 
	 LB_API_LKP_N_TYPES=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LbVipType { 
	 LB_API_VIP_TYPE_IP6_GRE6=0, 
	 LB_API_VIP_TYPE_IP6_GRE4=1, 
	 LB_API_VIP_TYPE_IP4_GRE6=2, 
	 LB_API_VIP_TYPE_IP4_GRE4=3, 
	 LB_API_VIP_TYPE_IP4_L3DSR=4, 
	 LB_API_VIP_TYPE_IP4_NAT4=5, 
	 LB_API_VIP_TYPE_IP6_NAT6=6, 
	 LB_API_VIP_N_TYPES=7, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LbNatProtocol { 
	 LB_API_NAT_PROTOCOL_UDP=6, 
	 LB_API_NAT_PROTOCOL_TCP=23, 
	 LB_API_NAT_PROTOCOL_ANY=4294967295, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbConf { 
	pub client_index : u32, 
	pub context : u32, 
	pub ip4_src_address : Ip4Address, 
	pub ip6_src_address : Ip6Address, 
	pub sticky_buckets_per_core : u32, 
	pub flow_timeout : u32, 
} 
impl LbConf { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_conf_22ddb739") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbConfReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl LbConfReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_conf_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbAddDelVip { 
	pub client_index : u32, 
	pub context : u32, 
	pub pfx : AddressWithPrefix, 
	pub protocol : u8, 
	pub port : u16, 
	pub encap : LbEncapType, 
	pub dscp : u8, 
	pub typ : LbSrvType, 
	pub target_port : u16, 
	pub node_port : u16, 
	pub new_flows_table_length : u32, 
	pub is_del : bool, 
} 
impl LbAddDelVip { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_add_del_vip_d15b7ddc") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbAddDelVipReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl LbAddDelVipReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_add_del_vip_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbAddDelAs { 
	pub client_index : u32, 
	pub context : u32, 
	pub pfx : AddressWithPrefix, 
	pub protocol : u8, 
	pub port : u16, 
	pub as_address : Address, 
	pub is_del : bool, 
	pub is_flush : bool, 
} 
impl LbAddDelAs { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_add_del_as_78628987") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbAddDelAsReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl LbAddDelAsReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_add_del_as_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbFlushVip { 
	pub client_index : u32, 
	pub context : u32, 
	pub pfx : AddressWithPrefix, 
	pub protocol : u8, 
	pub port : u16, 
} 
impl LbFlushVip { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_flush_vip_1063f819") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbFlushVipReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl LbFlushVipReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_flush_vip_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbVipDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub pfx : AddressWithPrefix, 
	pub pfx_matcher : PrefixMatcher, 
	pub protocol : u8, 
	pub port : u16, 
} 
impl LbVipDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_vip_dump_c7bcb124") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbVipDetails { 
	pub context : u32, 
	pub vip : LbVip, 
	pub encap : LbEncapType, 
	pub dscp : IpDscp, 
	pub srv_type : LbSrvType, 
	pub target_port : u16, 
	pub flow_table_length : u16, 
} 
impl LbVipDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_vip_details_08f39bed") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbAsDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub pfx : AddressWithPrefix, 
	pub protocol : u8, 
	pub port : u16, 
} 
impl LbAsDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_as_dump_1063f819") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbAsDetails { 
	pub context : u32, 
	pub vip : LbVip, 
	pub app_srv : Address, 
	pub flags : u8, 
	pub in_use_since : u32, 
} 
impl LbAsDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_as_details_9c39f60e") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbAddDelIntfNat4 { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub sw_if_index : InterfaceIndex, 
} 
impl LbAddDelIntfNat4 { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_add_del_intf_nat4_47d6e753") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbAddDelIntfNat4Reply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl LbAddDelIntfNat4Reply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_add_del_intf_nat4_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbAddDelIntfNat6 { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub sw_if_index : InterfaceIndex, 
} 
impl LbAddDelIntfNat6 { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_add_del_intf_nat6_47d6e753") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LbAddDelIntfNat6Reply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl LbAddDelIntfNat6Reply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("lb_add_del_intf_nat6_reply_e8d4e804") 
	 } 
} 
