/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeLocator { 
	pub weight : u8, 
	pub addr : Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeFwdEntry { 
	pub fwd_entry_index : u32, 
	pub dp_table : u32, 
	pub leid : Eid, 
	pub reid : Eid, 
	pub vni : u32, 
	pub action : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeNativeFwdRpath { 
	pub fib_index : u32, 
	pub nh_sw_if_index : InterfaceIndex, 
	pub nh_addr : Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : Ip4Address, 
	 ip6 : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union eid_address { 
	 prefix : Prefix, 
	 mac : MacAddress, 
	 nsh : Nsh, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum AddressFamily { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpFeatureLocation { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpEcn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpDscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpProto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum EidType { 
	 EID_TYPE_API_PREFIX=0, 
	 EID_TYPE_API_MAC=1, 
	 EID_TYPE_API_NSH=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum HmacKeyId { 
	 KEY_ID_API_HMAC_NO_KEY=0, 
	 KEY_ID_API_HMAC_SHA_1_96=1, 
	 KEY_ID_API_HMAC_SHA_256_128=2, 
} 
pub type InterfaceIndex=u32; 
pub type MacAddress=[u8;6]; 
pub type Ip4Address=[u8;4]; 
pub type Ip6Address=[u8;16]; 
pub type AddressWithPrefix=Prefix; 
pub type Ip4AddressWithPrefix=Ip4Prefix; 
pub type Ip6AddressWithPrefix=Ip6Prefix; 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeAddDelFwdEntry { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub rmt_eid : Eid, 
	pub lcl_eid : Eid, 
	pub vni : u32, 
	pub dp_table : u32, 
	pub action : u8, 
	pub loc_num : u32, 
	pub locs : GpeLocator, 
} 
impl GpeAddDelFwdEntry { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_add_del_fwd_entry_de6df50f") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeAddDelFwdEntryReply { 
	pub context : u32, 
	pub retval : i32, 
	pub fwd_entry_index : u32, 
} 
impl GpeAddDelFwdEntryReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_add_del_fwd_entry_reply_efe5f176") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeEnableDisable { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_enable : bool, 
} 
impl GpeEnableDisable { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_enable_disable_c264d7bf") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeEnableDisableReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl GpeEnableDisableReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_enable_disable_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeAddDelIface { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub is_l2 : bool, 
	pub dp_table : u32, 
	pub vni : u32, 
} 
impl GpeAddDelIface { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_add_del_iface_3ccff273") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeAddDelIfaceReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl GpeAddDelIfaceReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_add_del_iface_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeFwdEntryVnisGet { 
	pub client_index : u32, 
	pub context : u32, 
} 
impl GpeFwdEntryVnisGet { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_fwd_entry_vnis_get_51077d14") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeFwdEntryVnisGetReply { 
	pub context : u32, 
	pub retval : i32, 
	pub count : u32, 
	pub vnis : u32, 
} 
impl GpeFwdEntryVnisGetReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_fwd_entry_vnis_get_reply_aa70da20") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeFwdEntriesGet { 
	pub client_index : u32, 
	pub context : u32, 
	pub vni : u32, 
} 
impl GpeFwdEntriesGet { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_fwd_entries_get_8d1f2fe9") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeFwdEntriesGetReply { 
	pub context : u32, 
	pub retval : i32, 
	pub count : u32, 
	pub entries : GpeFwdEntry, 
} 
impl GpeFwdEntriesGetReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_fwd_entries_get_reply_f9f53f1b") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeFwdEntryPathDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub fwd_entry_index : u32, 
} 
impl GpeFwdEntryPathDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_fwd_entry_path_dump_39bce980") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeFwdEntryPathDetails { 
	pub context : u32, 
	pub lcl_loc : GpeLocator, 
	pub rmt_loc : GpeLocator, 
} 
impl GpeFwdEntryPathDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_fwd_entry_path_details_ee80b19a") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeSetEncapMode { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_vxlan : bool, 
} 
impl GpeSetEncapMode { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_set_encap_mode_bd819eac") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeSetEncapModeReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl GpeSetEncapModeReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_set_encap_mode_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeGetEncapMode { 
	pub client_index : u32, 
	pub context : u32, 
} 
impl GpeGetEncapMode { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_get_encap_mode_51077d14") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeGetEncapModeReply { 
	pub context : u32, 
	pub retval : i32, 
	pub encap_mode : u8, 
} 
impl GpeGetEncapModeReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_get_encap_mode_reply_36e3f7ca") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeAddDelNativeFwdRpath { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub table_id : u32, 
	pub nh_sw_if_index : InterfaceIndex, 
	pub nh_addr : Address, 
} 
impl GpeAddDelNativeFwdRpath { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_add_del_native_fwd_rpath_812da2f2") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeAddDelNativeFwdRpathReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl GpeAddDelNativeFwdRpathReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_add_del_native_fwd_rpath_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeNativeFwdRpathsGet { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_ip4 : bool, 
} 
impl GpeNativeFwdRpathsGet { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_native_fwd_rpaths_get_f652ceb4") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct GpeNativeFwdRpathsGetReply { 
	pub context : u32, 
	pub retval : i32, 
	pub count : u32, 
	pub entries : GpeNativeFwdRpath, 
} 
impl GpeNativeFwdRpathsGetReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("gpe_native_fwd_rpaths_get_reply_79d54eb9") 
	 } 
} 
