/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Address { 
	pub af : AddressFamily, 
	pub un : AddressUnion, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Prefix { 
	pub address : Address, 
	pub len : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Ip4AddressAndMask { 
	pub addr : Ip4Address, 
	pub mask : Ip4Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Ip6AddressAndMask { 
	pub addr : Ip6Address, 
	pub mask : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Mprefix { 
	pub af : AddressFamily, 
	pub grp_address_length : u16, 
	pub grp_address : AddressUnion, 
	pub src_address : AddressUnion, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Ip6Prefix { 
	pub address : Ip6Address, 
	pub len : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Ip4Prefix { 
	pub address : Ip4Address, 
	pub len : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct PrefixMatcher { 
	pub le : u8, 
	pub ge : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : Ip4Address, 
	 ip6 : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum AddressFamily { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpFeatureLocation { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpEcn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpDscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpProto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum L2tLookupKey { 
	 L2T_LOOKUP_KEY_API_SRC_ADDR=0, 
	 L2T_LOOKUP_KEY_API_DST_ADDR=1, 
	 L2T_LOOKUP_KEY_API_SESSION_ID=2, 
} 
pub type InterfaceIndex=u32; 
pub type MacAddress=[u8;6]; 
pub type Ip4Address=[u8;4]; 
pub type Ip6Address=[u8;16]; 
pub type AddressWithPrefix=Prefix; 
pub type Ip4AddressWithPrefix=Ip4Prefix; 
pub type Ip6AddressWithPrefix=Ip6Prefix; 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct L2tpv3CreateTunnel { 
	pub client_index : u32, 
	pub context : u32, 
	pub client_address : Address, 
	pub our_address : Address, 
	pub local_session_id : u32, 
	pub remote_session_id : u32, 
	pub local_cookie : u64, 
	pub remote_cookie : u64, 
	pub l2_sublayer_present : bool, 
	pub encap_vrf_id : u32, 
} 
impl L2tpv3CreateTunnel { 
	 pub fn get_message_id() -> String { 
	 	 String::from("l2tpv3_create_tunnel_596892cb") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct L2tpv3CreateTunnelReply { 
	pub context : u32, 
	pub retval : i32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl L2tpv3CreateTunnelReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("l2tpv3_create_tunnel_reply_5383d31f") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct L2tpv3SetTunnelCookies { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub new_local_cookie : u64, 
	pub new_remote_cookie : u64, 
} 
impl L2tpv3SetTunnelCookies { 
	 pub fn get_message_id() -> String { 
	 	 String::from("l2tpv3_set_tunnel_cookies_b3f4faf7") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct L2tpv3SetTunnelCookiesReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl L2tpv3SetTunnelCookiesReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("l2tpv3_set_tunnel_cookies_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SwIfL2tpv3TunnelDetails { 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub interface_name : FixedSizeString<U64>, 
	pub client_address : Address, 
	pub our_address : Address, 
	pub local_session_id : u32, 
	pub remote_session_id : u32, 
	pub local_cookie : u64, 
	pub remote_cookie : u64, 
	pub l2_sublayer_present : bool, 
} 
impl SwIfL2tpv3TunnelDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sw_if_l2tpv3_tunnel_details_1dab5c7e") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SwIfL2tpv3TunnelDump { 
	pub client_index : u32, 
	pub context : u32, 
} 
impl SwIfL2tpv3TunnelDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sw_if_l2tpv3_tunnel_dump_51077d14") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct L2tpv3InterfaceEnableDisable { 
	pub client_index : u32, 
	pub context : u32, 
	pub enable_disable : bool, 
	pub sw_if_index : InterfaceIndex, 
} 
impl L2tpv3InterfaceEnableDisable { 
	 pub fn get_message_id() -> String { 
	 	 String::from("l2tpv3_interface_enable_disable_3865946c") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct L2tpv3InterfaceEnableDisableReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl L2tpv3InterfaceEnableDisableReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("l2tpv3_interface_enable_disable_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct L2tpv3SetLookupKey { 
	pub client_index : u32, 
	pub context : u32, 
	pub key : L2tLookupKey, 
} 
impl L2tpv3SetLookupKey { 
	 pub fn get_message_id() -> String { 
	 	 String::from("l2tpv3_set_lookup_key_c9892c86") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct L2tpv3SetLookupKeyReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl L2tpv3SetLookupKeyReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("l2tpv3_set_lookup_key_reply_e8d4e804") 
	 } 
} 
