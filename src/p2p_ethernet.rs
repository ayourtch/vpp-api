/*
   Autogenerated Data, Do not Edit! 
   Author: @felixfaisal 
*/
#![allow(non_camel_case_types)]
use vpp_macros::Message; 
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum::{U10, U24, U256, U32, U64};
use crate::interface_types::*; 
use crate::ethernet_types::*; 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(p2p_ethernet_add_eeb8e717)] 
pub struct P2pEthernetAdd { 
	pub client_index : u32, 
	pub context : u32, 
	pub parent_if_index : InterfaceIndex, 
	pub subif_id : u32, 
	pub remote_mac : MacAddress, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(p2p_ethernet_add_reply_5383d31f)] 
pub struct P2pEthernetAddReply { 
	pub context : u32, 
	pub retval : i32, 
	pub sw_if_index : InterfaceIndex, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(p2p_ethernet_del_0b62c386)] 
pub struct P2pEthernetDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub parent_if_index : InterfaceIndex, 
	pub remote_mac : MacAddress, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(p2p_ethernet_del_reply_e8d4e804)] 
pub struct P2pEthernetDelReply { 
	pub context : u32, 
	pub retval : i32, 
} 
