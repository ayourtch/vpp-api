/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsTunnel { 
	pub mt_sw_if_index : InterfaceIndex, 
	pub mt_tunnel_index : u32, 
	pub mt_l2_only : bool, 
	pub mt_is_multicast : bool, 
	pub mt_tag : String, 
	pub mt_n_paths : u8, 
	pub mt_paths : FibPath, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsTable { 
	pub mt_table_id : u32, 
	pub mt_name : String, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsRoute { 
	pub mr_table_id : u32, 
	pub mr_label : u32, 
	pub mr_eos : u8, 
	pub mr_eos_proto : u8, 
	pub mr_is_multicast : bool, 
	pub mr_n_paths : u8, 
	pub mr_paths : FibPath, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : Ip4Address, 
	 ip6 : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : Ip4Address, 
	 ip6 : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum AddressFamily { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpFeatureLocation { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpEcn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpDscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpProto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum FibPathNhProto { 
	 FIB_API_PATH_NH_PROTO_IP4=0, 
	 FIB_API_PATH_NH_PROTO_IP6=1, 
	 FIB_API_PATH_NH_PROTO_MPLS=2, 
	 FIB_API_PATH_NH_PROTO_ETHERNET=3, 
	 FIB_API_PATH_NH_PROTO_BIER=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum FibPathFlags { 
	 FIB_API_PATH_FLAG_NONE=0, 
	 FIB_API_PATH_FLAG_RESOLVE_VIA_ATTACHED=1, 
	 FIB_API_PATH_FLAG_RESOLVE_VIA_HOST=2, 
	 FIB_API_PATH_FLAG_POP_PW_CW=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum FibPathType { 
	 FIB_API_PATH_TYPE_NORMAL=0, 
	 FIB_API_PATH_TYPE_LOCAL=1, 
	 FIB_API_PATH_TYPE_DROP=2, 
	 FIB_API_PATH_TYPE_UDP_ENCAP=3, 
	 FIB_API_PATH_TYPE_BIER_IMP=4, 
	 FIB_API_PATH_TYPE_ICMP_UNREACH=5, 
	 FIB_API_PATH_TYPE_ICMP_PROHIBIT=6, 
	 FIB_API_PATH_TYPE_SOURCE_LOOKUP=7, 
	 FIB_API_PATH_TYPE_DVR=8, 
	 FIB_API_PATH_TYPE_INTERFACE_RX=9, 
	 FIB_API_PATH_TYPE_CLASSIFY=10, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum AddressFamily { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpFeatureLocation { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpEcn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpDscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpProto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsIpBindUnbind { 
	pub client_index : u32, 
	pub context : u32, 
	pub mb_mpls_table_id : u32, 
	pub mb_label : u32, 
	pub mb_ip_table_id : u32, 
	pub mb_is_bind : bool, 
	pub mb_prefix : Prefix, 
} 
impl MplsIpBindUnbind { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_ip_bind_unbind_48249a27") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsIpBindUnbindReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl MplsIpBindUnbindReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_ip_bind_unbind_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsTunnelAddDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub mt_is_add : bool, 
	pub mt_tunnel : MplsTunnel, 
} 
impl MplsTunnelAddDel { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_tunnel_add_del_e57ce61d") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsTunnelAddDelReply { 
	pub context : u32, 
	pub retval : i32, 
	pub sw_if_index : InterfaceIndex, 
	pub tunnel_index : u32, 
} 
impl MplsTunnelAddDelReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_tunnel_add_del_reply_afb01472") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsTunnelDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl MplsTunnelDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_tunnel_dump_f9e6675e") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsTunnelDetails { 
	pub context : u32, 
	pub mt_tunnel : MplsTunnel, 
} 
impl MplsTunnelDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_tunnel_details_f3c0928e") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsTableAddDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub mt_is_add : bool, 
	pub mt_table : MplsTable, 
} 
impl MplsTableAddDel { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_table_add_del_57817512") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsTableAddDelReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl MplsTableAddDelReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_table_add_del_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsTableDump { 
	pub client_index : u32, 
	pub context : u32, 
} 
impl MplsTableDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_table_dump_51077d14") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsTableDetails { 
	pub context : u32, 
	pub mt_table : MplsTable, 
} 
impl MplsTableDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_table_details_f03ecdc8") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsRouteAddDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub mr_is_add : bool, 
	pub mr_is_multipath : bool, 
	pub mr_route : MplsRoute, 
} 
impl MplsRouteAddDel { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_route_add_del_343cff54") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsRouteAddDelReply { 
	pub context : u32, 
	pub retval : i32, 
	pub stats_index : u32, 
} 
impl MplsRouteAddDelReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_route_add_del_reply_1992deab") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsRouteDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub table : MplsTable, 
} 
impl MplsRouteDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_route_dump_935fdefa") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct MplsRouteDetails { 
	pub context : u32, 
	pub mr_route : MplsRoute, 
} 
impl MplsRouteDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("mpls_route_details_d0ac384c") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SwInterfaceSetMplsEnable { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub enable : bool, 
} 
impl SwInterfaceSetMplsEnable { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sw_interface_set_mpls_enable_ae6cfcfb") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SwInterfaceSetMplsEnableReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl SwInterfaceSetMplsEnableReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sw_interface_set_mpls_enable_reply_e8d4e804") 
	 } 
} 
