/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdEntry { 
	pub spd_id : u32, 
	pub priority : i32, 
	pub is_outbound : bool, 
	pub sa_id : u32, 
	pub policy : IpsecSpdAction, 
	pub protocol : u8, 
	pub remote_address_start : Address, 
	pub remote_address_stop : Address, 
	pub local_address_start : Address, 
	pub local_address_stop : Address, 
	pub remote_port_start : u16, 
	pub remote_port_stop : u16, 
	pub local_port_start : u16, 
	pub local_port_stop : u16, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecTunnelProtect { 
	pub sw_if_index : InterfaceIndex, 
	pub nh : Address, 
	pub sa_out : u32, 
	pub n_sa_in : u8, 
	pub sa_in : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecItf { 
	pub user_instance : u32, 
	pub mode : TunnelMode, 
	pub sw_if_index : InterfaceIndex, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : Ip4Address, 
	 ip6 : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : Ip4Address, 
	 ip6 : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : Ip4Address, 
	 ip6 : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : Ip4Address, 
	 ip6 : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum AddressFamily { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpFeatureLocation { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpEcn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpDscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpProto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum AddressFamily { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpFeatureLocation { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpEcn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpDscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpProto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum TunnelEncapDecapFlags { 
	 TUNNEL_API_ENCAP_DECAP_FLAG_NONE=0, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DF=1, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_SET_DF=2, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DSCP=4, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_ECN=8, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_DECAP_COPY_ECN=16, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_INNER_HASH=32, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_HOP_LIMIT=64, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_FLOW_LABEL=128, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum TunnelMode { 
	 TUNNEL_API_MODE_P2P=0, 
	 TUNNEL_API_MODE_MP=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IpsecCryptoAlg { 
	 IPSEC_API_CRYPTO_ALG_NONE=0, 
	 IPSEC_API_CRYPTO_ALG_AES_CBC_128=1, 
	 IPSEC_API_CRYPTO_ALG_AES_CBC_192=2, 
	 IPSEC_API_CRYPTO_ALG_AES_CBC_256=3, 
	 IPSEC_API_CRYPTO_ALG_AES_CTR_128=4, 
	 IPSEC_API_CRYPTO_ALG_AES_CTR_192=5, 
	 IPSEC_API_CRYPTO_ALG_AES_CTR_256=6, 
	 IPSEC_API_CRYPTO_ALG_AES_GCM_128=7, 
	 IPSEC_API_CRYPTO_ALG_AES_GCM_192=8, 
	 IPSEC_API_CRYPTO_ALG_AES_GCM_256=9, 
	 IPSEC_API_CRYPTO_ALG_DES_CBC=10, 
	 IPSEC_API_CRYPTO_ALG_3DES_CBC=11, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IpsecIntegAlg { 
	 IPSEC_API_INTEG_ALG_NONE=0, 
	 IPSEC_API_INTEG_ALG_MD5_96=1, 
	 IPSEC_API_INTEG_ALG_SHA1_96=2, 
	 IPSEC_API_INTEG_ALG_SHA_256_96=3, 
	 IPSEC_API_INTEG_ALG_SHA_256_128=4, 
	 IPSEC_API_INTEG_ALG_SHA_384_192=5, 
	 IPSEC_API_INTEG_ALG_SHA_512_256=6, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IpsecSadFlags { 
	 IPSEC_API_SAD_FLAG_NONE=0, 
	 IPSEC_API_SAD_FLAG_USE_ESN=1, 
	 IPSEC_API_SAD_FLAG_USE_ANTI_REPLAY=2, 
	 IPSEC_API_SAD_FLAG_IS_TUNNEL=4, 
	 IPSEC_API_SAD_FLAG_IS_TUNNEL_V6=8, 
	 IPSEC_API_SAD_FLAG_UDP_ENCAP=16, 
	 IPSEC_API_SAD_FLAG_IS_INBOUND=64, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IpsecProto { 
	 IPSEC_API_PROTO_ESP=50, 
	 IPSEC_API_PROTO_AH=51, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum AddressFamily { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpFeatureLocation { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpEcn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpDscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpProto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum AddressFamily { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpFeatureLocation { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpEcn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpDscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpProto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum TunnelEncapDecapFlags { 
	 TUNNEL_API_ENCAP_DECAP_FLAG_NONE=0, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DF=1, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_SET_DF=2, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_DSCP=4, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_ECN=8, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_DECAP_COPY_ECN=16, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_INNER_HASH=32, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_HOP_LIMIT=64, 
	 TUNNEL_API_ENCAP_DECAP_FLAG_ENCAP_COPY_FLOW_LABEL=128, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum TunnelMode { 
	 TUNNEL_API_MODE_P2P=0, 
	 TUNNEL_API_MODE_MP=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IpsecSpdAction { 
	 IPSEC_API_SPD_ACTION_BYPASS=0, 
	 IPSEC_API_SPD_ACTION_DISCARD=1, 
	 IPSEC_API_SPD_ACTION_RESOLVE=2, 
	 IPSEC_API_SPD_ACTION_PROTECT=3, 
} 
pub type Ip4Address=[u8;4]; 
pub type Ip6Address=[u8;16]; 
pub type AddressWithPrefix=Prefix; 
pub type Ip4AddressWithPrefix=Ip4Prefix; 
pub type Ip6AddressWithPrefix=Ip6Prefix; 
pub type InterfaceIndex=u32; 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdAddDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub spd_id : u32, 
} 
impl IpsecSpdAddDel { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_spd_add_del_20e89a95") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdAddDelReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl IpsecSpdAddDelReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_spd_add_del_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecInterfaceAddDelSpd { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub sw_if_index : InterfaceIndex, 
	pub spd_id : u32, 
} 
impl IpsecInterfaceAddDelSpd { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_interface_add_del_spd_80f80cbb") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecInterfaceAddDelSpdReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl IpsecInterfaceAddDelSpdReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_interface_add_del_spd_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdEntryAddDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub entry : IpsecSpdEntry, 
} 
impl IpsecSpdEntryAddDel { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_spd_entry_add_del_9f384b8d") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdEntryAddDelReply { 
	pub context : u32, 
	pub retval : i32, 
	pub stat_index : u32, 
} 
impl IpsecSpdEntryAddDelReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_spd_entry_add_del_reply_9ffac24b") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdsDump { 
	pub client_index : u32, 
	pub context : u32, 
} 
impl IpsecSpdsDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_spds_dump_51077d14") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdsDetails { 
	pub context : u32, 
	pub spd_id : u32, 
	pub npolicies : u32, 
} 
impl IpsecSpdsDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_spds_details_a04bb254") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub spd_id : u32, 
	pub sa_id : u32, 
} 
impl IpsecSpdDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_spd_dump_afefbf7d") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdDetails { 
	pub context : u32, 
	pub entry : IpsecSpdEntry, 
} 
impl IpsecSpdDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_spd_details_f2222790") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSadEntryAddDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub entry : IpsecSadEntry, 
} 
impl IpsecSadEntryAddDel { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sad_entry_add_del_b8def364") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSadEntryAddDelV2 { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub entry : IpsecSadEntryV2, 
} 
impl IpsecSadEntryAddDelV2 { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sad_entry_add_del_v2_aca78b27") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSadEntryAddDelV3 { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub entry : IpsecSadEntryV3, 
} 
impl IpsecSadEntryAddDelV3 { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sad_entry_add_del_v3_c77ebd92") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSadEntryAddDelReply { 
	pub context : u32, 
	pub retval : i32, 
	pub stat_index : u32, 
} 
impl IpsecSadEntryAddDelReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sad_entry_add_del_reply_9ffac24b") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSadEntryAddDelV2Reply { 
	pub context : u32, 
	pub retval : i32, 
	pub stat_index : u32, 
} 
impl IpsecSadEntryAddDelV2Reply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sad_entry_add_del_v2_reply_9ffac24b") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSadEntryAddDelV3Reply { 
	pub context : u32, 
	pub retval : i32, 
	pub stat_index : u32, 
} 
impl IpsecSadEntryAddDelV3Reply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sad_entry_add_del_v3_reply_9ffac24b") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecTunnelProtectUpdate { 
	pub client_index : u32, 
	pub context : u32, 
	pub tunnel : IpsecTunnelProtect, 
} 
impl IpsecTunnelProtectUpdate { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_tunnel_protect_update_143f155d") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecTunnelProtectUpdateReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl IpsecTunnelProtectUpdateReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_tunnel_protect_update_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecTunnelProtectDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub nh : Address, 
} 
impl IpsecTunnelProtectDel { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_tunnel_protect_del_ddd2ba36") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecTunnelProtectDelReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl IpsecTunnelProtectDelReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_tunnel_protect_del_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecTunnelProtectDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl IpsecTunnelProtectDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_tunnel_protect_dump_f9e6675e") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecTunnelProtectDetails { 
	pub context : u32, 
	pub tun : IpsecTunnelProtect, 
} 
impl IpsecTunnelProtectDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_tunnel_protect_details_ac6c823b") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdInterfaceDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub spd_index : u32, 
	pub spd_index_valid : u8, 
} 
impl IpsecSpdInterfaceDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_spd_interface_dump_8971de19") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSpdInterfaceDetails { 
	pub context : u32, 
	pub spd_index : u32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl IpsecSpdInterfaceDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_spd_interface_details_7a0bcf3e") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecItfCreate { 
	pub client_index : u32, 
	pub context : u32, 
	pub itf : IpsecItf, 
} 
impl IpsecItfCreate { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_itf_create_6f50b3bc") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecItfCreateReply { 
	pub context : u32, 
	pub retval : i32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl IpsecItfCreateReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_itf_create_reply_5383d31f") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecItfDelete { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl IpsecItfDelete { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_itf_delete_f9e6675e") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecItfDeleteReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl IpsecItfDeleteReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_itf_delete_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecItfDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl IpsecItfDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_itf_dump_f9e6675e") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecItfDetails { 
	pub context : u32, 
	pub itf : IpsecItf, 
} 
impl IpsecItfDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_itf_details_548a73b8") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSaDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub sa_id : u32, 
} 
impl IpsecSaDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sa_dump_2076c2f4") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSaV2Dump { 
	pub client_index : u32, 
	pub context : u32, 
	pub sa_id : u32, 
} 
impl IpsecSaV2Dump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sa_v2_dump_2076c2f4") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSaV3Dump { 
	pub client_index : u32, 
	pub context : u32, 
	pub sa_id : u32, 
} 
impl IpsecSaV3Dump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sa_v3_dump_2076c2f4") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSaDetails { 
	pub context : u32, 
	pub entry : IpsecSadEntry, 
	pub sw_if_index : InterfaceIndex, 
	pub salt : u32, 
	pub seq_outbound : u64, 
	pub last_seq_inbound : u64, 
	pub replay_window : u64, 
	pub stat_index : u32, 
} 
impl IpsecSaDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sa_details_b30c7f41") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSaV2Details { 
	pub context : u32, 
	pub entry : IpsecSadEntryV2, 
	pub sw_if_index : InterfaceIndex, 
	pub salt : u32, 
	pub seq_outbound : u64, 
	pub last_seq_inbound : u64, 
	pub replay_window : u64, 
	pub stat_index : u32, 
} 
impl IpsecSaV2Details { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sa_v2_details_e2130051") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSaV3Details { 
	pub context : u32, 
	pub entry : IpsecSadEntryV3, 
	pub sw_if_index : InterfaceIndex, 
	pub seq_outbound : u64, 
	pub last_seq_inbound : u64, 
	pub replay_window : u64, 
	pub stat_index : u32, 
} 
impl IpsecSaV3Details { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_sa_v3_details_2fc991ee") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecBackendDump { 
	pub client_index : u32, 
	pub context : u32, 
} 
impl IpsecBackendDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_backend_dump_51077d14") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecBackendDetails { 
	pub context : u32, 
	pub name : FixedSizeString<U128>, 
	pub protocol : IpsecProto, 
	pub index : u8, 
	pub active : bool, 
} 
impl IpsecBackendDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_backend_details_ee601c29") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSelectBackend { 
	pub client_index : u32, 
	pub context : u32, 
	pub protocol : IpsecProto, 
	pub index : u8, 
} 
impl IpsecSelectBackend { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_select_backend_5bcfd3b7") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSelectBackendReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl IpsecSelectBackendReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_select_backend_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSetAsyncMode { 
	pub client_index : u32, 
	pub context : u32, 
	pub async_enable : bool, 
} 
impl IpsecSetAsyncMode { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_set_async_mode_a6465f7c") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSetAsyncModeReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl IpsecSetAsyncModeReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("ipsec_set_async_mode_reply_e8d4e804") 
	 } 
} 
