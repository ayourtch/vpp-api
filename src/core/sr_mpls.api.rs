/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Address { 
	pub af : AddressFamily, 
	pub un : AddressUnion, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Prefix { 
	pub address : Address, 
	pub len : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Ip4AddressAndMask { 
	pub addr : Ip4Address, 
	pub mask : Ip4Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Ip6AddressAndMask { 
	pub addr : Ip6Address, 
	pub mask : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Mprefix { 
	pub af : AddressFamily, 
	pub grp_address_length : u16, 
	pub grp_address : AddressUnion, 
	pub src_address : AddressUnion, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Ip6Prefix { 
	pub address : Ip6Address, 
	pub len : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Ip4Prefix { 
	pub address : Ip4Address, 
	pub len : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct PrefixMatcher { 
	pub le : u8, 
	pub ge : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : Ip4Address, 
	 ip6 : Ip6Address, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum AddressFamily { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpFeatureLocation { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpEcn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpDscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum IpProto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum SrPolicyOp { 
	 SR_POLICY_OP_API_NONE=0, 
	 SR_POLICY_OP_API_ADD=1, 
	 SR_POLICY_OP_API_DEL=2, 
	 SR_POLICY_OP_API_MOD=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum SrBehavior { 
	 SR_BEHAVIOR_API_END=1, 
	 SR_BEHAVIOR_API_X=2, 
	 SR_BEHAVIOR_API_T=3, 
	 SR_BEHAVIOR_API_D_FIRST=4, 
	 SR_BEHAVIOR_API_DX2=5, 
	 SR_BEHAVIOR_API_DX6=6, 
	 SR_BEHAVIOR_API_DX4=7, 
	 SR_BEHAVIOR_API_DT6=8, 
	 SR_BEHAVIOR_API_DT4=9, 
	 SR_BEHAVIOR_API_LAST=10, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum SrSteer { 
	 SR_STEER_API_L2=2, 
	 SR_STEER_API_IPV4=4, 
	 SR_STEER_API_IPV6=6, 
} 
pub type InterfaceIndex=u32; 
pub type Ip4Address=[u8;4]; 
pub type Ip6Address=[u8;16]; 
pub type AddressWithPrefix=Prefix; 
pub type Ip4AddressWithPrefix=Ip4Prefix; 
pub type Ip6AddressWithPrefix=Ip6Prefix; 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SrMplsPolicyAdd { 
	pub client_index : u32, 
	pub context : u32, 
	pub bsid : u32, 
	pub weight : u32, 
	pub is_spray : bool, 
	pub n_segments : u8, 
	pub segments : u32, 
} 
impl SrMplsPolicyAdd { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sr_mpls_policy_add_a1a70c70") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SrMplsPolicyAddReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl SrMplsPolicyAddReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sr_mpls_policy_add_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SrMplsPolicyMod { 
	pub client_index : u32, 
	pub context : u32, 
	pub bsid : u32, 
	pub operation : SrPolicyOp, 
	pub sl_index : u32, 
	pub weight : u32, 
	pub n_segments : u8, 
	pub segments : u32, 
} 
impl SrMplsPolicyMod { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sr_mpls_policy_mod_88482c17") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SrMplsPolicyModReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl SrMplsPolicyModReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sr_mpls_policy_mod_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SrMplsPolicyDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub bsid : u32, 
} 
impl SrMplsPolicyDel { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sr_mpls_policy_del_e29d34fa") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SrMplsPolicyDelReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl SrMplsPolicyDelReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sr_mpls_policy_del_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SrMplsSteeringAddDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_del : bool, 
	pub bsid : u32, 
	pub table_id : u32, 
	pub prefix : Prefix, 
	pub mask_width : u32, 
	pub next_hop : Address, 
	pub color : u32, 
	pub co_bits : u8, 
	pub vpn_label : u32, 
} 
impl SrMplsSteeringAddDel { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sr_mpls_steering_add_del_7d1b0a0b") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SrMplsSteeringAddDelReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl SrMplsSteeringAddDelReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sr_mpls_steering_add_del_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SrMplsPolicyAssignEndpointColor { 
	pub client_index : u32, 
	pub context : u32, 
	pub bsid : u32, 
	pub endpoint : Address, 
	pub color : u32, 
} 
impl SrMplsPolicyAssignEndpointColor { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sr_mpls_policy_assign_endpoint_color_5e1c5c13") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SrMplsPolicyAssignEndpointColorReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl SrMplsPolicyAssignEndpointColorReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sr_mpls_policy_assign_endpoint_color_reply_e8d4e804") 
	 } 
} 
