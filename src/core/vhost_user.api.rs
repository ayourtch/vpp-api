/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum VirtioNetFeaturesFirst32 { 
	 VIRTIO_NET_F_API_CSUM=1, 
	 VIRTIO_NET_F_API_GUEST_CSUM=2, 
	 VIRTIO_NET_F_API_GUEST_TSO4=128, 
	 VIRTIO_NET_F_API_GUEST_TSO6=256, 
	 VIRTIO_NET_F_API_GUEST_UFO=1024, 
	 VIRTIO_NET_F_API_HOST_TSO4=2048, 
	 VIRTIO_NET_F_API_HOST_TSO6=4096, 
	 VIRTIO_NET_F_API_HOST_UFO=16384, 
	 VIRTIO_NET_F_API_MRG_RXBUF=32768, 
	 VIRTIO_NET_F_API_CTRL_VQ=131072, 
	 VIRTIO_NET_F_API_GUEST_ANNOUNCE=2097152, 
	 VIRTIO_NET_F_API_MQ=4194304, 
	 VHOST_F_API_LOG_ALL=67108864, 
	 VIRTIO_F_API_ANY_LAYOUT=134217728, 
	 VIRTIO_F_API_INDIRECT_DESC=268435456, 
	 VHOST_USER_F_API_PROTOCOL_FEATURES=1073741824, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum VirtioNetFeaturesLast32 { 
	 VIRTIO_F_API_VERSION_1=1, 
} 
pub type InterfaceIndex=u32; 
pub type MacAddress=[u8;6]; 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct CreateVhostUserIf { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_server : bool, 
	pub sock_filename : FixedSizeString<U256>, 
	pub renumber : bool, 
	pub disable_mrg_rxbuf : bool, 
	pub disable_indirect_desc : bool, 
	pub enable_gso : bool, 
	pub enable_packed : bool, 
	pub custom_dev_instance : u32, 
	pub use_custom_mac : bool, 
	pub mac_address : MacAddress, 
	pub tag : FixedSizeString<U64>, 
} 
impl CreateVhostUserIf { 
	 pub fn get_message_id() -> String { 
	 	 String::from("create_vhost_user_if_c785c6fc") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct CreateVhostUserIfReply { 
	pub context : u32, 
	pub retval : i32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl CreateVhostUserIfReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("create_vhost_user_if_reply_5383d31f") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct ModifyVhostUserIf { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub is_server : bool, 
	pub sock_filename : FixedSizeString<U256>, 
	pub renumber : bool, 
	pub enable_gso : bool, 
	pub enable_packed : bool, 
	pub custom_dev_instance : u32, 
} 
impl ModifyVhostUserIf { 
	 pub fn get_message_id() -> String { 
	 	 String::from("modify_vhost_user_if_0e71d40b") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct ModifyVhostUserIfReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl ModifyVhostUserIfReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("modify_vhost_user_if_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct CreateVhostUserIfV2 { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_server : bool, 
	pub sock_filename : FixedSizeString<U256>, 
	pub renumber : bool, 
	pub disable_mrg_rxbuf : bool, 
	pub disable_indirect_desc : bool, 
	pub enable_gso : bool, 
	pub enable_packed : bool, 
	pub enable_event_idx : bool, 
	pub custom_dev_instance : u32, 
	pub use_custom_mac : bool, 
	pub mac_address : MacAddress, 
	pub tag : FixedSizeString<U64>, 
} 
impl CreateVhostUserIfV2 { 
	 pub fn get_message_id() -> String { 
	 	 String::from("create_vhost_user_if_v2_dba1cc1d") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct CreateVhostUserIfV2Reply { 
	pub context : u32, 
	pub retval : i32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl CreateVhostUserIfV2Reply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("create_vhost_user_if_v2_reply_5383d31f") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct ModifyVhostUserIfV2 { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub is_server : bool, 
	pub sock_filename : FixedSizeString<U256>, 
	pub renumber : bool, 
	pub enable_gso : bool, 
	pub enable_packed : bool, 
	pub enable_event_idx : bool, 
	pub custom_dev_instance : u32, 
} 
impl ModifyVhostUserIfV2 { 
	 pub fn get_message_id() -> String { 
	 	 String::from("modify_vhost_user_if_v2_b2483771") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct ModifyVhostUserIfV2Reply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl ModifyVhostUserIfV2Reply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("modify_vhost_user_if_v2_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct DeleteVhostUserIf { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl DeleteVhostUserIf { 
	 pub fn get_message_id() -> String { 
	 	 String::from("delete_vhost_user_if_f9e6675e") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct DeleteVhostUserIfReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl DeleteVhostUserIfReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("delete_vhost_user_if_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SwInterfaceVhostUserDetails { 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub interface_name : FixedSizeString<U64>, 
	pub virtio_net_hdr_sz : u32, 
	pub features_first_32 : VirtioNetFeaturesFirst32, 
	pub features_last_32 : VirtioNetFeaturesLast32, 
	pub is_server : bool, 
	pub sock_filename : FixedSizeString<U256>, 
	pub num_regions : u32, 
	pub sock_errno : i32, 
} 
impl SwInterfaceVhostUserDetails { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sw_interface_vhost_user_details_98530df1") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct SwInterfaceVhostUserDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl SwInterfaceVhostUserDump { 
	 pub fn get_message_id() -> String { 
	 	 String::from("sw_interface_vhost_user_dump_f9e6675e") 
	 } 
} 
