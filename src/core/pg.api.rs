/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfStatusFlags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum MtuProto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum LinkDuplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum SubIfFlags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum RxMode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IfType { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum Direction { 
	 RX=0, 
	 TX=1, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct PgCreateInterface { 
	pub client_index : u32, 
	pub context : u32, 
	pub interface_id : InterfaceIndex, 
	pub gso_enabled : bool, 
	pub gso_size : u32, 
} 
impl PgCreateInterface { 
	 pub fn get_message_id() -> String { 
	 	 String::from("pg_create_interface_b7c893d7") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct PgCreateInterfaceReply { 
	pub context : u32, 
	pub retval : i32, 
	pub sw_if_index : InterfaceIndex, 
} 
impl PgCreateInterfaceReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("pg_create_interface_reply_5383d31f") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct PgInterfaceEnableDisableCoalesce { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub coalesce_enabled : bool, 
} 
impl PgInterfaceEnableDisableCoalesce { 
	 pub fn get_message_id() -> String { 
	 	 String::from("pg_interface_enable_disable_coalesce_a2ef99e7") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct PgInterfaceEnableDisableCoalesceReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl PgInterfaceEnableDisableCoalesceReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("pg_interface_enable_disable_coalesce_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct PgCapture { 
	pub client_index : u32, 
	pub context : u32, 
	pub interface_id : InterfaceIndex, 
	pub is_enabled : bool, 
	pub count : u32, 
	pub pcap_file_name : VariableSizeString, 
} 
impl PgCapture { 
	 pub fn get_message_id() -> String { 
	 	 String::from("pg_capture_3712fb6c") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct PgCaptureReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl PgCaptureReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("pg_capture_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct PgEnableDisable { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_enabled : bool, 
	pub stream_name : VariableSizeString, 
} 
impl PgEnableDisable { 
	 pub fn get_message_id() -> String { 
	 	 String::from("pg_enable_disable_01f94f3a") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct PgEnableDisableReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl PgEnableDisableReply { 
	 pub fn get_message_id() -> String { 
	 	 String::from("pg_enable_disable_reply_e8d4e804") 
	 } 
} 
