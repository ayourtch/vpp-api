/*
   Autogenerated Data, Do not Edit! 
   Author: @felixfaisal 
*/
#![allow(non_camel_case_types)]
use vpp_macros::Message; 
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum::{U10, U24, U256, U32, U64};
use crate::interface_types::*; 
use crate::ip_types::*; 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(gtpu_add_del_tunnel_9a9c0426)] 
pub struct GtpuAddDelTunnel { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub src_address : Address, 
	pub dst_address : Address, 
	pub mcast_sw_if_index : InterfaceIndex, 
	pub encap_vrf_id : u32, 
	pub decap_next_index : u32, 
	pub teid : u32, 
	pub tteid : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(gtpu_add_del_tunnel_reply_5383d31f)] 
pub struct GtpuAddDelTunnelReply { 
	pub context : u32, 
	pub retval : i32, 
	pub sw_if_index : InterfaceIndex, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(gtpu_tunnel_update_tteid_8a2db108)] 
pub struct GtpuTunnelUpdateTteid { 
	pub client_index : u32, 
	pub context : u32, 
	pub dst_address : Address, 
	pub encap_vrf_id : u32, 
	pub teid : u32, 
	pub tteid : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(gtpu_tunnel_update_tteid_reply_e8d4e804)] 
pub struct GtpuTunnelUpdateTteidReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(gtpu_tunnel_dump_f9e6675e)] 
pub struct GtpuTunnelDump { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(gtpu_tunnel_details_4535cf95)] 
pub struct GtpuTunnelDetails { 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub src_address : Address, 
	pub dst_address : Address, 
	pub mcast_sw_if_index : InterfaceIndex, 
	pub encap_vrf_id : u32, 
	pub decap_next_index : u32, 
	pub teid : u32, 
	pub tteid : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(sw_interface_set_gtpu_bypass_65247409)] 
pub struct SwInterfaceSetGtpuBypass { 
	pub client_index : u32, 
	pub context : u32, 
	pub sw_if_index : InterfaceIndex, 
	pub is_ipv6 : bool, 
	pub enable : bool, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(sw_interface_set_gtpu_bypass_reply_e8d4e804)] 
pub struct SwInterfaceSetGtpuBypassReply { 
	pub context : u32, 
	pub retval : i32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(gtpu_offload_rx_f0b08786)] 
pub struct GtpuOffloadRx { 
	pub client_index : u32, 
	pub context : u32, 
	pub hw_if_index : u32, 
	pub sw_if_index : u32, 
	pub enable : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize, Message)] 
#[message_name_and_crc(gtpu_offload_rx_reply_e8d4e804)] 
pub struct GtpuOffloadRxReply { 
	pub context : u32, 
	pub retval : i32, 
} 
