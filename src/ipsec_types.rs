/*
   Autogenerated Data, Do not Edit! 
   Author: @felixfaisal 
*/
#![allow(non_camel_case_types)]
use vpp_macros::Message; 
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum::{U10, U24, U256, U32, U64};
use crate::ip_types::*; 
use crate::tunnel_types::*; 
use crate::interface_types::*; 
use crate::ip_types::*; 
// Implementation for key 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Key { 
	pub length : u8, 
	pub data : u8, 
} 
// Implementation for ipsec_sad_entry 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSadEntry { 
	pub sad_id : u32, 
	pub spi : u32, 
	pub protocol : IpsecProto, 
	pub crypto_algorithm : IpsecCryptoAlg, 
	pub crypto_key : Key, 
	pub integrity_algorithm : IpsecIntegAlg, 
	pub integrity_key : Key, 
	pub flags : IpsecSadFlags, 
	pub tunnel_src : Address, 
	pub tunnel_dst : Address, 
	pub tx_table_id : u32, 
	pub salt : u32, 
	pub udp_src_port : u16, 
	pub udp_dst_port : u16, 
} 
// Implementation for ipsec_sad_entry_v2 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSadEntryV2 { 
	pub sad_id : u32, 
	pub spi : u32, 
	pub protocol : IpsecProto, 
	pub crypto_algorithm : IpsecCryptoAlg, 
	pub crypto_key : Key, 
	pub integrity_algorithm : IpsecIntegAlg, 
	pub integrity_key : Key, 
	pub flags : IpsecSadFlags, 
	pub tunnel_src : Address, 
	pub tunnel_dst : Address, 
	pub tunnel_flags : TunnelEncapDecapFlags, 
	pub dscp : IpDscp, 
	pub tx_table_id : u32, 
	pub salt : u32, 
	pub udp_src_port : u16, 
	pub udp_dst_port : u16, 
} 
// Implementation for ipsec_sad_entry_v3 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpsecSadEntryV3 { 
	pub sad_id : u32, 
	pub spi : u32, 
	pub protocol : IpsecProto, 
	pub crypto_algorithm : IpsecCryptoAlg, 
	pub crypto_key : Key, 
	pub integrity_algorithm : IpsecIntegAlg, 
	pub integrity_key : Key, 
	pub flags : IpsecSadFlags, 
	pub tunnel : Tunnel, 
	pub salt : u32, 
	pub udp_src_port : u16, 
	pub udp_dst_port : u16, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IpsecCryptoAlg { 
	 IPSEC_API_CRYPTO_ALG_NONE=0, 
	 IPSEC_API_CRYPTO_ALG_AES_CBC_128=1, 
	 IPSEC_API_CRYPTO_ALG_AES_CBC_192=2, 
	 IPSEC_API_CRYPTO_ALG_AES_CBC_256=3, 
	 IPSEC_API_CRYPTO_ALG_AES_CTR_128=4, 
	 IPSEC_API_CRYPTO_ALG_AES_CTR_192=5, 
	 IPSEC_API_CRYPTO_ALG_AES_CTR_256=6, 
	 IPSEC_API_CRYPTO_ALG_AES_GCM_128=7, 
	 IPSEC_API_CRYPTO_ALG_AES_GCM_192=8, 
	 IPSEC_API_CRYPTO_ALG_AES_GCM_256=9, 
	 IPSEC_API_CRYPTO_ALG_DES_CBC=10, 
	 IPSEC_API_CRYPTO_ALG_3DES_CBC=11, 
	 #[serde(other)] 
	 Invalid 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IpsecIntegAlg { 
	 IPSEC_API_INTEG_ALG_NONE=0, 
	 IPSEC_API_INTEG_ALG_MD5_96=1, 
	 IPSEC_API_INTEG_ALG_SHA1_96=2, 
	 IPSEC_API_INTEG_ALG_SHA_256_96=3, 
	 IPSEC_API_INTEG_ALG_SHA_256_128=4, 
	 IPSEC_API_INTEG_ALG_SHA_384_192=5, 
	 IPSEC_API_INTEG_ALG_SHA_512_256=6, 
	 #[serde(other)] 
	 Invalid 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IpsecSadFlags { 
	 IPSEC_API_SAD_FLAG_NONE=0, 
	 IPSEC_API_SAD_FLAG_USE_ESN=1, 
	 IPSEC_API_SAD_FLAG_USE_ANTI_REPLAY=2, 
	 IPSEC_API_SAD_FLAG_IS_TUNNEL=4, 
	 IPSEC_API_SAD_FLAG_IS_TUNNEL_V6=8, 
	 IPSEC_API_SAD_FLAG_UDP_ENCAP=16, 
	 IPSEC_API_SAD_FLAG_IS_INBOUND=64, 
	 #[serde(other)] 
	 Invalid 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum IpsecProto { 
	 IPSEC_API_PROTO_ESP=50, 
	 IPSEC_API_PROTO_AH=51, 
	 #[serde(other)] 
	 Invalid 
} 
