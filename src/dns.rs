/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum::{U10, U24, U256, U32, U64};
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct DnsEnableDisable { 
	pub client_index : u32, 
	pub context : u32, 
	pub enable : u8, 
} 
impl DnsEnableDisable { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("dns_enable_disable_8050327d") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct DnsEnableDisableReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl DnsEnableDisableReply { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("dns_enable_disable_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct DnsNameServerAddDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_ip6 : u8, 
	pub is_add : u8, 
	pub server_address : u8, 
} 
impl DnsNameServerAddDel { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("dns_name_server_add_del_3bb05d8c") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct DnsNameServerAddDelReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl DnsNameServerAddDelReply { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("dns_name_server_add_del_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct DnsResolveName { 
	pub client_index : u32, 
	pub context : u32, 
	pub name : u8, 
} 
impl DnsResolveName { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("dns_resolve_name_c6566676") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct DnsResolveNameReply { 
	pub context : u32, 
	pub retval : i32, 
	pub ip4_set : u8, 
	pub ip6_set : u8, 
	pub ip4_address : u8, 
	pub ip6_address : u8, 
} 
impl DnsResolveNameReply { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("dns_resolve_name_reply_c2d758c3") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct DnsResolveIp { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_ip6 : u8, 
	pub address : u8, 
} 
impl DnsResolveIp { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("dns_resolve_ip_ae96a1a3") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct DnsResolveIpReply { 
	pub context : u32, 
	pub retval : i32, 
	pub name : u8, 
} 
impl DnsResolveIpReply { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("dns_resolve_ip_reply_49ed78d6") 
	 } 
} 
