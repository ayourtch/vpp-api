/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum::{U10, U24, U256, U32, U64};
use crate::interface_types::*; 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum FlowprobeWhichFlags { 
	 FLOWPROBE_WHICH_FLAG_IP4=1, 
	 FLOWPROBE_WHICH_FLAG_L2=2, 
	 FLOWPROBE_WHICH_FLAG_IP6=4, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum FlowprobeRecordFlags { 
	 FLOWPROBE_RECORD_FLAG_L2=1, 
	 FLOWPROBE_RECORD_FLAG_L3=2, 
	 FLOWPROBE_RECORD_FLAG_L4=4, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowprobeTxInterfaceAddDel { 
	pub client_index : u32, 
	pub context : u32, 
	pub is_add : bool, 
	pub which : FlowprobeWhichFlags, 
	pub sw_if_index : InterfaceIndex, 
} 
impl FlowprobeTxInterfaceAddDel { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("flowprobe_tx_interface_add_del_b782c976") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowprobeTxInterfaceAddDelReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl FlowprobeTxInterfaceAddDelReply { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("flowprobe_tx_interface_add_del_reply_e8d4e804") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowprobeParams { 
	pub client_index : u32, 
	pub context : u32, 
	pub record_flags : FlowprobeRecordFlags, 
	pub active_timer : u32, 
	pub passive_timer : u32, 
} 
impl FlowprobeParams { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("flowprobe_params_baa46c09") 
	 } 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowprobeParamsReply { 
	pub context : u32, 
	pub retval : i32, 
} 
impl FlowprobeParamsReply { 
	 pub fn get_message_name_and_crc() -> String { 
	 	 String::from("flowprobe_params_reply_e8d4e804") 
	 } 
} 
