#![allow(
    dead_code,
    unused_mut,
    unused_variables,
    unused_must_use,
    non_camel_case_types,
    unused_imports
)]
use env_logger::filter;
use lazy_static::lazy_static;
use linked_hash_map::LinkedHashMap;
use regex::Regex;
use std::fmt::format;
use std::fs::File;
use std::io::prelude::*;

use crate::alias::VppJsApiAlias;
use crate::basetypes::{maxSizeUnion, sizeof_alias, sizeof_struct};
use crate::enums::VppJsApiEnum;
use crate::file_schema::VppJsApiFile;
use crate::message::VppJsApiMessage;
use crate::parser_helper::{camelize_ident, get_ident, get_type};
use crate::types::VppJsApiType;
use crate::types::{VppJsApiFieldSize, VppJsApiMessageFieldDef};

pub fn gen_code(code: &VppJsApiFile, name: &str, api_definition: &mut Vec<(String, String)>) {
    lazy_static! {
        static ref RE: Regex = Regex::new(r"/[a-z_0-9]*.api.json").unwrap();
        static ref IE: Regex = Regex::new(r"/[a-z_0-9]*.api").unwrap();
    }
    let mut preamble: String = format!("/* Autogenerated data. Do not edit */\n");
    preamble.push_str("#![allow(non_camel_case_types)]\n");
    preamble.push_str("use serde::{de::DeserializeOwned, Deserialize, Serialize};\n");
    preamble.push_str("use vpp_api_encoding::typ::*;\n");
    preamble.push_str("use vpp_api_transport::*;\n");
    preamble.push_str("use serde_repr::{Serialize_repr, Deserialize_repr};\n");
    preamble.push_str("use typenum::{U10, U24, U256, U32, U64};\n");
    // Do imports
    let importTable: Vec<String> = vec![];
    for x in 0..code.imports.len() {
        let mut count: u8 = 0;
        let check = IE
            .find(&code.imports[x])
            .unwrap()
            .as_str()
            .trim_start_matches("/")
            .trim_end_matches(".api");
        for j in &importTable {
            if j == check {
                count = count + 1;
                break;
            }
        }
        if count == 0 {
            preamble.push_str(&format!("use crate::{}::*; \n", check));
        }
    }
    // Generating Code for all the Types(Structs)
    preamble.push_str(&VppJsApiType::iter_and_generate_code(
        &code.types,
        api_definition,
        name,
    ));
    // Generatingg Code for all the Unions
    preamble.push_str(&VppJsApiType::iter_and_generate_code_union(
        &code.unions,
        api_definition,
        name,
        code,
    ));
    // Generating Code for all the Enums
    preamble.push_str(&VppJsApiEnum::iter_and_generate_code(
        &code.enums,
        api_definition,
        name,
    ));
    // Generating Code for all the Aliases
    preamble.push_str(&VppJsApiAlias::iter_and_generate_code(
        &code.aliases,
        api_definition,
        name,
    ));
    // Generating Code for all the Messages
    preamble.push_str(&VppJsApiMessage::iter_and_generate_code(&code.messages));
    println!("{}", name);
    let fileName = RE
        .find(&name)
        .unwrap()
        .as_str()
        .trim_end_matches(".api.json");
    println!("{}", fileName);
    let mut file = File::create(format!("src/{}.rs", fileName)).unwrap();
    file.write_all(preamble.as_bytes()).unwrap();

    println!("Generated code for {}", fileName);
}
