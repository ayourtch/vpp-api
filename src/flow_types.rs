/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum::{U10, U24, U256, U32, U64};
use crate::ethernet_types::*; 
use crate::ip_types::*; 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpPortAndMask { 
	pub port : u16, 
	pub mask : u16, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct IpProtAndMask { 
	pub prot : IpProto, 
	pub mask : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowEthernet { 
	pub foo : i32, 
	pub src_addr : MacAddress, 
	pub dst_addr : MacAddress, 
	pub typ : u16, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp4 { 
	pub foo : i32, 
	pub src_addr : Ip4AddressAndMask, 
	pub dst_addr : Ip4AddressAndMask, 
	pub protocol : IpProtAndMask, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp6 { 
	pub foo : i32, 
	pub src_addr : Ip6AddressAndMask, 
	pub dst_addr : Ip6AddressAndMask, 
	pub protocol : IpProtAndMask, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp4NTuple { 
	pub foo : i32, 
	pub src_addr : Ip4AddressAndMask, 
	pub dst_addr : Ip4AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub src_port : IpPortAndMask, 
	pub dst_port : IpPortAndMask, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp6NTuple { 
	pub foo : i32, 
	pub src_addr : Ip6AddressAndMask, 
	pub dst_addr : Ip6AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub src_port : IpPortAndMask, 
	pub dst_port : IpPortAndMask, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp4NTupleTagged { 
	pub foo : i32, 
	pub src_addr : Ip4AddressAndMask, 
	pub dst_addr : Ip4AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub src_port : IpPortAndMask, 
	pub dst_port : IpPortAndMask, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp6NTupleTagged { 
	pub foo : i32, 
	pub src_addr : Ip6AddressAndMask, 
	pub dst_addr : Ip6AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub src_port : IpPortAndMask, 
	pub dst_port : IpPortAndMask, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp4L2tpv3oip { 
	pub foo : i32, 
	pub src_addr : Ip4AddressAndMask, 
	pub dst_addr : Ip4AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub session_id : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp4IpsecEsp { 
	pub foo : i32, 
	pub src_addr : Ip4AddressAndMask, 
	pub dst_addr : Ip4AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub spi : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp4IpsecAh { 
	pub foo : i32, 
	pub src_addr : Ip4AddressAndMask, 
	pub dst_addr : Ip4AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub spi : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp4Vxlan { 
	pub foo : i32, 
	pub src_addr : Ip4AddressAndMask, 
	pub dst_addr : Ip4AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub src_port : IpPortAndMask, 
	pub dst_port : IpPortAndMask, 
	pub vni : u16, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp6Vxlan { 
	pub foo : i32, 
	pub src_addr : Ip6AddressAndMask, 
	pub dst_addr : Ip6AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub src_port : IpPortAndMask, 
	pub dst_port : IpPortAndMask, 
	pub vni : u16, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp4Gtpc { 
	pub foo : i32, 
	pub src_addr : Ip4AddressAndMask, 
	pub dst_addr : Ip4AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub src_port : IpPortAndMask, 
	pub dst_port : IpPortAndMask, 
	pub teid : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowIp4Gtpu { 
	pub foo : i32, 
	pub src_addr : Ip4AddressAndMask, 
	pub dst_addr : Ip4AddressAndMask, 
	pub protocol : IpProtAndMask, 
	pub src_port : IpPortAndMask, 
	pub dst_port : IpPortAndMask, 
	pub teid : u32, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct FlowRule { 
	pub typ : FlowType, 
	pub index : u32, 
	pub actions : FlowAction, 
	pub mark_flow_id : u32, 
	pub redirect_node_index : u32, 
	pub redirect_device_input_next_index : u32, 
	pub redirect_queue : u32, 
	pub buffer_advance : i32, 
	pub flow : Flow, 
} 
pub type Flow = [u8;80]; 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum FlowType { 
	 FLOW_TYPE_ETHERNET=1, 
	 FLOW_TYPE_IP4=2, 
	 FLOW_TYPE_IP6=3, 
	 FLOW_TYPE_IP4_L2TPV3OIP=4, 
	 FLOW_TYPE_IP4_IPSEC_ESP=5, 
	 FLOW_TYPE_IP4_IPSEC_AH=6, 
	 FLOW_TYPE_IP4_N_TUPLE=7, 
	 FLOW_TYPE_IP6_N_TUPLE=8, 
	 FLOW_TYPE_IP4_N_TUPLE_TAGGED=9, 
	 FLOW_TYPE_IP6_N_TUPLE_TAGGED=10, 
	 FLOW_TYPE_IP4_VXLAN=11, 
	 FLOW_TYPE_IP6_VXLAN=12, 
	 FLOW_TYPE_IP4_GTPC=13, 
	 FLOW_TYPE_IP4_GTPU=14, 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u32)]
pub enum FlowAction { 
	 FLOW_ACTION_COUNT=1, 
	 FLOW_ACTION_MARK=2, 
	 FLOW_ACTION_BUFFER_ADVANCE=4, 
	 FLOW_ACTION_REDIRECT_TO_NODE=8, 
	 FLOW_ACTION_REDIRECT_TO_QUEUE=16, 
	 FLOW_ACTION_DROP=64, 
} 
