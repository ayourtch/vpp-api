/*
   Autogenerated Data, Do not Edit! 
   Author: @felixfaisal 
*/
#![allow(non_camel_case_types)]
use vpp_macros::Message; 
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
use serde_repr::{Serialize_repr, Deserialize_repr};
use typenum::{U10, U24, U256, U32, U64};
use crate::interface_types::*; 
use crate::ethernet_types::*; 
use crate::ip_types::*; 
// Implementation for local_locator 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct LocalLocator { 
	pub sw_if_index : InterfaceIndex, 
	pub priority : u8, 
	pub weight : u8, 
} 
// Implementation for remote_locator 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct RemoteLocator { 
	pub priority : u8, 
	pub weight : u8, 
	pub ip_address : Address, 
} 
// Implementation for nsh 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Nsh { 
	pub spi : u32, 
	pub si : u8, 
} 
// Implementation for eid 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct Eid { 
	pub typ : EidType, 
	pub address : EidAddress, 
} 
// Implementation for hmac_key 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub struct HmacKey { 
	pub id : HmacKeyId, 
	pub key : u8, 
} 
pub type EidAddress = [u8;18]; 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum EidType { 
	 EID_TYPE_API_PREFIX=0, 
	 EID_TYPE_API_MAC=1, 
	 EID_TYPE_API_NSH=2, 
	 #[serde(other)] 
	 Invalid 
} 
#[derive(Debug, Clone, Serialize_repr, Deserialize_repr)] 
#[repr(u8)]
pub enum HmacKeyId { 
	 KEY_ID_API_HMAC_NO_KEY=0, 
	 KEY_ID_API_HMAC_SHA_1_96=1, 
	 KEY_ID_API_HMAC_SHA_256_128=2, 
	 #[serde(other)] 
	 Invalid 
} 
