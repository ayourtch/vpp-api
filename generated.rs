/* Autogenerated data. Do not edit */
#![allow(non_camel_case_types)]
use serde::{de::DeserializeOwned, Deserialize, Serialize};
use vpp_api_encoding::typ::*;
use vpp_api_transport::*;
#[derive(Debug, Clone, Serialize, Deserialize)] 
struct address { 
	 af : vl_api_address_family_t, 
	 un : vl_api_address_union_t, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
struct prefix { 
	 address : vl_api_address_t, 
	 len : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
struct ip4_address_and_mask { 
	 addr : vl_api_ip4_address_t, 
	 mask : vl_api_ip4_address_t, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
struct ip6_address_and_mask { 
	 addr : vl_api_ip6_address_t, 
	 mask : vl_api_ip6_address_t, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
struct mprefix { 
	 af : vl_api_address_family_t, 
	 grp_address_length : u16, 
	 grp_address : vl_api_address_union_t, 
	 src_address : vl_api_address_union_t, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
struct ip6_prefix { 
	 address : vl_api_ip6_address_t, 
	 len : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
struct ip4_prefix { 
	 address : vl_api_ip4_address_t, 
	 len : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
struct prefix_matcher { 
	 le : u8, 
	 ge : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
struct acl_rule { 
	 is_permit : vl_api_acl_action_t, 
	 src_prefix : vl_api_prefix_t, 
	 dst_prefix : vl_api_prefix_t, 
	 proto : vl_api_ip_proto_t, 
	 srcport_or_icmptype_first : u16, 
	 srcport_or_icmptype_last : u16, 
	 dstport_or_icmpcode_first : u16, 
	 dstport_or_icmpcode_last : u16, 
	 tcp_flags_mask : u8, 
	 tcp_flags_value : u8, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
struct macip_acl_rule { 
	 is_permit : vl_api_acl_action_t, 
	 src_mac : vl_api_mac_address_t, 
	 src_mac_mask : vl_api_mac_address_t, 
	 src_prefix : vl_api_prefix_t, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
union address_union { 
	 ip4 : vl_api_ip4_address_t, 
	 ip6 : vl_api_ip6_address_t, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum address_family { 
	 ADDRESS_IP4=0, 
	 ADDRESS_IP6=1, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum ip_feature_location { 
	 IP_API_FEATURE_INPUT=0, 
	 IP_API_FEATURE_OUTPUT=1, 
	 IP_API_FEATURE_LOCAL=2, 
	 IP_API_FEATURE_PUNT=3, 
	 IP_API_FEATURE_DROP=4, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum ip_ecn { 
	 IP_API_ECN_NONE=0, 
	 IP_API_ECN_ECT0=1, 
	 IP_API_ECN_ECT1=2, 
	 IP_API_ECN_CE=3, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum ip_dscp { 
	 IP_API_DSCP_CS0=0, 
	 IP_API_DSCP_CS1=8, 
	 IP_API_DSCP_AF11=10, 
	 IP_API_DSCP_AF12=12, 
	 IP_API_DSCP_AF13=14, 
	 IP_API_DSCP_CS2=16, 
	 IP_API_DSCP_AF21=18, 
	 IP_API_DSCP_AF22=20, 
	 IP_API_DSCP_AF23=22, 
	 IP_API_DSCP_CS3=24, 
	 IP_API_DSCP_AF31=26, 
	 IP_API_DSCP_AF32=28, 
	 IP_API_DSCP_AF33=30, 
	 IP_API_DSCP_CS4=32, 
	 IP_API_DSCP_AF41=34, 
	 IP_API_DSCP_AF42=36, 
	 IP_API_DSCP_AF43=38, 
	 IP_API_DSCP_CS5=40, 
	 IP_API_DSCP_EF=46, 
	 IP_API_DSCP_CS6=48, 
	 IP_API_DSCP_CS7=50, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum ip_proto { 
	 IP_API_PROTO_HOPOPT=0, 
	 IP_API_PROTO_ICMP=1, 
	 IP_API_PROTO_IGMP=2, 
	 IP_API_PROTO_TCP=6, 
	 IP_API_PROTO_UDP=17, 
	 IP_API_PROTO_GRE=47, 
	 IP_API_PROTO_ESP=50, 
	 IP_API_PROTO_AH=51, 
	 IP_API_PROTO_ICMP6=58, 
	 IP_API_PROTO_EIGRP=88, 
	 IP_API_PROTO_OSPF=89, 
	 IP_API_PROTO_SCTP=132, 
	 IP_API_PROTO_RESERVED=255, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum acl_action { 
	 ACL_ACTION_API_DENY=0, 
	 ACL_ACTION_API_PERMIT=1, 
	 ACL_ACTION_API_PERMIT_REFLECT=2, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum if_status_flags { 
	 IF_STATUS_API_FLAG_ADMIN_UP=1, 
	 IF_STATUS_API_FLAG_LINK_UP=2, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum mtu_proto { 
	 MTU_PROTO_API_L3=0, 
	 MTU_PROTO_API_IP4=1, 
	 MTU_PROTO_API_IP6=2, 
	 MTU_PROTO_API_MPLS=3, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum link_duplex { 
	 LINK_DUPLEX_API_UNKNOWN=0, 
	 LINK_DUPLEX_API_HALF=1, 
	 LINK_DUPLEX_API_FULL=2, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum sub_if_flags { 
	 SUB_IF_API_FLAG_NO_TAGS=1, 
	 SUB_IF_API_FLAG_ONE_TAG=2, 
	 SUB_IF_API_FLAG_TWO_TAGS=4, 
	 SUB_IF_API_FLAG_DOT1AD=8, 
	 SUB_IF_API_FLAG_EXACT_MATCH=16, 
	 SUB_IF_API_FLAG_DEFAULT=32, 
	 SUB_IF_API_FLAG_OUTER_VLAN_ID_ANY=64, 
	 SUB_IF_API_FLAG_INNER_VLAN_ID_ANY=128, 
	 SUB_IF_API_FLAG_MASK_VNET=254, 
	 SUB_IF_API_FLAG_DOT1AH=256, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum rx_mode { 
	 RX_MODE_API_UNKNOWN=0, 
	 RX_MODE_API_POLLING=1, 
	 RX_MODE_API_INTERRUPT=2, 
	 RX_MODE_API_ADAPTIVE=3, 
	 RX_MODE_API_DEFAULT=4, 
} 
#[derive(Debug, Clone, Serialize, Deserialize)] 
pub enum if_type { 
	 IF_API_TYPE_HARDWARE=0, 
	 IF_API_TYPE_SUB=1, 
	 IF_API_TYPE_P2P=2, 
	 IF_API_TYPE_PIPE=3, 
} 
type ip4_address=[u8;4]; 
type ip6_address=[u8;16]; 
type address_with_prefix=vl_api_prefix_t; 
type ip4_address_with_prefix=vl_api_ip4_prefix_t; 
type ip6_address_with_prefix=vl_api_ip6_prefix_t; 
type mac_address=[u8;6]; 
type interface_index=u32; 
